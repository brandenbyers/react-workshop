doctype html
include ../includes/mixins

+page("Lecture 02 - React Basics")
  +lecture-title-page("React Basics", "Lecture 02")

  section
    h1 React
    p 
      a(href="http://facebook.github.io/react/index.html") website
      
  section
    p A JAVASCRIPT LIBRARY FOR BUILDING USER INTERFACES
    
  section 
    h1 Virtual Dom
    
  section
    p Replica of the Browser DOM
    p React redraws the entire screen on change
    p React calculates the minimum amount of changes
    
  section
    p 
      a(href="http://facebook.github.io/react/docs/glossary.html") More info?
    
  section
    p For a bare-bones React component, we need to know about 2 top level api methods: 
    ul
      li React.createClass();
      li React.render();
      
  section
    h1 React.createClass();
    
  section
      p Creates a component class, given a specification. 
      p A component implements a render method which returns one single child. 
      p That child may have an arbitrarily deep child structure. 
      p They are convenience wrappers that construct backing instances (via new) for you.
      
  section
    pre.
      <code class="json" data-trim>
      var React = require('react/addons');
      var Hello = React.createClass({
        render: function () {...}
      });

      module.exports = Hello;
      </code>
    
  section
    h1 Component Specifications
    
  section
    h1 render()
    
  section
    p Required
    
  section
    p Return a single child component. 
    p Either a virtual representation of a native DOM component or composite component.
    
  section
    p Return null (or false) to indicate that you don't want anything rendered. 
    p React renders a <noscript> tag to work with our current diffing algorithm.
    p When returning null or false, React.findDOMNode(this) will return null.
    
  section
    p Should be pure
    p Does not modify component state
    p Returns the same result each time it's invoked
    p Does not read from or write to the DOM. 
    p Perform work in componentDidMount() or the other lifecycle methods.

  section
    h1 getInitialState()
    
  section 
    p Invoked once before the component is mounted. 
    p The return value will be used as the initial value of this.state.
    
  section
    pre.
      <code class="json" data-trim>
      getInitialState: function () {
        return {
          saveText: 'Update',
          employee: {},
          errors: {}
        };
      },
      </code>
    
  section
    h1 getDefaultProps()
    
  section
    p Invoked once and cached when the class is created. 
    p Values in the mapping will be set on this.props if that prop is not specified by the parent component.
    
  section
    p This method is invoked before any instances are created and thus cannot rely on this.props. 
    p Objects returned will be shared across instances, not copied.
    
  section
    pre.
      <code class="json" data-trim>
      getDefaultProps: function() {
        return {
          maxVisible: 5
        };
      },
      </code>
    
  section
    h1 propTypes {}
    
  section
    p The propTypes object allows you to validate props being passed to your components. 
    
  section
    pre.
      <code class="json" data-trim>
      propTypes: {
        max:        React.PropTypes.number.isRequired,
        maxVisible: React.PropTypes.number,
        onChange:   React.PropTypes.func.isRequired
      },
      </code>
    
  section
    h1 mixins
    
  section
    p The mixins array allows you to use mixins to share behavior among multiple components. 
    
  section
    pre.
      <code class="json" data-trim>
      mixins: [
        Router.Navigation,
        Router.State,
        EmployeeMixin
      ],
      </code>
    
  section
    h1 statics
    
  section
    p The statics object allows you to define static methods that can be called on the component class. 
    p Methods defined within this block are static, meaning that you can run them before any component instances are created.
    
  section
    p Methods do not have access to the props or state of your components. 
    p If you want to check the value of props in a static method, have the caller pass in the props as an argument to the static method.

  section
    pre.
      <code class="json" data-trim>
      statics: {
        willTransitionTo: function (transition, params) {
          return LoginStore.requireAuthenticatedUser(transition);
        }
      },
      </code>

  section
    h1 displayName
   
  section
    p Used in debugging messages. 
    p JSX sets this value automatically.
    
  section
    pre.
      <code class="json" data-trim>
      displayName: 'super-cool-thingy'
      </code>
    
  section
    h1 JSX
    
  section
    p JavaScript syntax extension that looks similar to XML. 
    p Compiles to actual Javascript which you will be able to see during labs.
    
  section
    pre.
      <code class="json" data-trim>
      render : function () {

       return (
        &gt;div className="ui message"&lt;
          &gt;div className="ui huge header"&lt;{this.state.greeting}&gt;/div&lt;
          &gt;div className="ui large header"&lt;{this.props.friend}&gt;/div&lt;
        &gt;/div&lt;
       );
      }
      </code>
    
  section
    pre.
      <code class="json" data-trim>
      render : function () {
        return (
          React.createElement("div", {className: "ui message"}, 
            React.createElement("div", {className: "ui huge header"}, this.state.greeting), 
            React.createElement("div", {className: "ui large header"}, this.props.friend)
          )
        );
      }
      </code>
    
  section
    p React's JSX uses the upper vs. lower case convention to distinguish between local component classes and HTML tags.
    ul
      li UpperCase = Component
      li lowercase = tag
    
  section
    p Since JSX is JavaScript, identifiers such as class and for are discouraged as XML attribute names. 
    ul
      li htmlFor = for
      li className = class
      
  section
    h1 React.render()
    
  section
    p Renders a ReactElement into the DOM in the supplied container.
    p Returns a reference to the component.
    p Replaces the contents of the container node you pass in.
    
  section
    p If the ReactElement was previously rendered into container, this will perform an update on it and only mutate the DOM as necessary to reflect the latest React component.
    
  section
    p If the optional callback is provided, it will be executed after the component is rendered or updated.
    
  section
    pre.
      <code class="json" data-trim>
      React.render(&gt;Hello friend="WoooHooo"/&lt;, document.getElementById('app'));
      </code>
      
  section
    h1 Data: State vs. Props
    
  section
    p "props" are the data that you pass into your component via attributes
    p Used for application data that you need to display or manage with your component.
          
  section
    p "state" is your components internally scoped ... state.
    p Used for your components behaviors: open, disabled, submitted, etc. 
    
  section
    p One exception: "Controller" components
    p They will have a state that represents the application data
    p They pass their state as props to thier children components
    
  section
    pre.
      <code class="json" data-trim>
      render : function () {
        return (
          &gt;EmployeeForm employee={this.state.employee}
            errors={this.state.errors}
            validateAll={this.validateAll}
            hasErrors={this.hasErrors}
            saveText={this.state.saveText}
            onSave={this.saveEmployee}
            validate={this.validate}
            toggleAdmin={this.toggleAdmin} /&lt;
        );
      }
      </code>
    
  section
    h1 Component Lifecycle
    
  section
    h1 Mounting: componentWillMount
    
  section 
    p Invoked once, both on the client and server.
    p Immediately before the initial rendering occurs. 
    
  section
    p If you call setState within this method, render() will see the updated state.
    p Executed only once despite the state change.
    
  section 
    h1 Mounting: componentDidMount
    
  section
    p Invoked once, only on the client (not on the server).
    p Immediately after the initial rendering occurs. 
    p Has a DOM representation which you can access via React.findDOMNode(this).
    
  section
    p Perform in this method: 
    ul 
      li Integration with other JavaScript frameworks.
      li Set timers using setTimeout or setInterval.
      li Send AJAX requests.
      
  section
    h1 Updating: componentWillReceiveProps(object nextProps)
    
  section
    p Invoked when a component is receiving new props. 
    p This method is not called for the initial render.
    
  section
    p Used to react to a prop transition before render() is called by updating the state using this.setState(). 
    p The old props can be accessed via this.props. 
    p Calling this.setState() within this function will not trigger an additional render.
    
  section
    h1 Updating: shouldComponentUpdate(object nextProps, object nextState)
    
  section
    p Invoked before rendering when new props or state are being received. 
    p This method is not called for the initial render or when forceUpdate is used.
    
  section 
    p Return false when you're certain that the transition to the new props and state will not require a component update.
    p render() will be completely skipped until the next state change. 
    p componentWillUpdate and componentDidUpdate will not be called.

  section 
    h1 Updating: componentWillUpdate(object nextProps, object nextState)
    
  section
    p Invoked immediately before rendering when new props or state are being received. 
    p Not called for the initial render.
    
  section
    p Cannot use this.setState() in this method. 
    p If you need to update state in response to a prop change, use componentWillReceiveProps instead.
    
  section 
    h1 Updating: componentDidUpdate(object prevProps, object prevState)
    
  section
    p Invoked immediately after the component's updates are flushed to the DOM. 
    p Not called for the initial render.
    p Operate on the DOM when the component has been updated.
    
  section
    h1 Unmounting: componentWillUnmount
    
  section
    p Invoked immediately before a component is unmounted from the DOM.
    p Perform any necessary cleanup in this method
    ul 
      li Invalidating timers
      li Cleaning up any DOM elements that were created in componentDidMount.
  
  section
    h1 TestUtils
    
  section
    p Utilities to make it easy to test React components.
    
  section
    pre.
      <code class="json" data-trim>
      var React, TestUtils;
      beforeEach(function () {
        React = require('react/addons');
        TestUtils = React.addons.TestUtils;
      });
      </code>
      
  section
    h1 Simulate.{eventName}(DOMElement element, object eventData)
    
  section 
    p Simulate an event dispatch on a DOM node with optional eventData event data. 
    p Possibly the single most useful utility in ReactTestUtils.
    p Has a method for every event that React understands.
    
  section 
    h1 renderIntoDocument(ReactComponent instance)
    
  section 
    p Render a component into a detached DOM node in the document. 
    p This function requires a DOM.
    
  section 
    h1 Expectation Helpers
    
  section 
    p isElement(ReactElement element)
    p Returns true if element is any ReactElement.
    
  section 
    p isElementOfType(ReactElement element, function componentClass)
    p Returns true if element is a ReactElement whose type is of a React componentClass.
    
  section 
    p isDOMComponent(ReactComponent instance)
    p Returns true if instance is a DOM component (such as a <div> or <span>).
    
  section 
    p isCompositeComponent(ReactComponent instance)
    p Returns true if instance is a composite component (created with React.createClass())
    
  section 
    p isCompositeComponentWithType(ReactComponent instance, function componentClass)
    p Returns true if instance is a composite component (created with React.createClass()) whose type is of a React componentClass.

  section
    h1 DOM Query Methods
    
  section
    p scryRenderedDOMComponentsWithClass(ReactComponent tree, string className)
    p Finds all instances of components in the rendered tree that are DOM components with the class name matching className.
    
  section
    p findRenderedDOMComponentWithClass(ReactComponent tree, string className)
    p Like scryRenderedDOMComponentsWithClass() but expects there to be one result
    p Throws exception if there is any other number of matches besides one.
    
  section
    p scryRenderedDOMComponentsWithTag(ReactComponent tree, string tagName)
    p Finds all instances of components in the rendered tree that are DOM components with the tag name matching tagName.
    
  section 
    p findRenderedDOMComponentWithTag(ReactComponent tree, string tagName)
    p Like scryRenderedDOMComponentsWithTag() but expects there to be one result.
    p Throws exception if there is any other number of matches besides one.

  section
    p scryRenderedComponentsWithType(ReactComponent tree, function componentClass)
    p Finds all instances of components with type equal to componentClass.
    
  section
    p findRenderedComponentWithType(ReactComponent tree, function componentClass)
    p Same as scryRenderedComponentsWithType() but expects there to be one result. 
    p Throws exception if there is any other number of matches besides one.
    
  section
    h1 Lab 02
    h2 Your First React Component
