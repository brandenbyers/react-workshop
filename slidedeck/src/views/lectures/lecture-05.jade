doctype html
include ../includes/mixins

+page("Lecture 05 - React Forms Validation")
  +lecture-title-page("React Forms Validation", "Lecture 05")

  section
    h1 React Forms
    
  section
    p &lt;input&gt;, &lt;textarea&gt;, and &lt;option&gt; differ from other native components.
    p Mutated via user interactions. 
    p Provide interfaces to manage forms in response to user interactions.

  section
    h2 Interactive Props
    
  section 
    p Props affected via user interactions:
    ul 
      li value:     supported by input and textarea.
      li checked:   supported checkbox or radio.
      li selected:  supported by option.
      
  section
    p Form components allow listening for changes.
    p Set a callback to the onChange prop. 
    p Callback fires when: 
    ul 
      li The value changes.
      li Checked state changes.
      li Selected state changes.
      
  section 
    h2 Controlled Components
    
  section
    p Any &lt;input&gt; with value set is a controlled component. 
    p Value of the rendered element will always reflect the value prop. 
    
  section
    h2 Uncontrolled Components
    
  section
    p Any &lt;input&gt; that does not supply a value (or sets it to null).
    p Value of the rendered element will reflect the user's input.
    
  section
    h2 Validation 
    
  section
    p We can now use controlled components in our form to enforce validation.
    
  section
    pre.
      <code class="javascript" data-trim>
      (&lt;form name="employeeForm"&gt;
        &lt;input name="username" 
          value={this.props.employee.username}
          onChange={this.props.validate} /&gt;
      &lt;/form&gt;)
      
      </code>
    
  section
    pre.
      <code class="javascript" data-trim>
      validate: function (event) {
        var field = event.target.name;
        var value = event.target.value;
        
        // min length 1
        if (!value || value.length &lt; 1) {
          this.state.errors[field] = 
            'You must provide a username.';
        }
        // max length 40
        else if (value.length &gt; 40) {
          this.state.errors[field] = 
            'Username can only be 40 characters long.';
        }

        this.props.employee[field] = value;
        return this.setState({
          employee: this.state.employee, 
          errors: this.state.errors
        });
      }
      
      </code>
        
  section
    h1 lab prep
    p LoginStore and LoginActions

  section
    h1 Lab 5
    h2 React Form Validation
